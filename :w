defmodule Aoc2021.Day12 do
  use Aoc2021

  def part1 do
    map = load_paths()
    places = get_caves(map)

    walk("start", places, map, [])
  end

  defp walk("end", __places, _map, path) do
    {Enum.reverse(["end" | path])}
  end

  defp walk(current, places, map, path) do
    places =
      if not is_big(current) do
        Enum.reject(places, &(&1 == current))
      else
        places
      end

    map
    |> Enum.flat_map(fn {a, b} ->
      cond do
        a == current -> [b]
        b == current -> [a]
        true -> []
      end
    end)
    |> Enum.uniq()
    |> Enum.filter(&(&1 in places))
    |> Enum.map(&walk(&1, places, map, [current | path]))
  end

  defp get_caves(paths) do
    paths
    |> Enum.flat_map(&Tuple.to_list/1)
    |> Enum.uniq()
  end

  defp load_paths do
    fetch_input!(12)
    |> Enum.map(fn line ->
      String.split(line, "-") |> List.to_tuple()
    end)
  end

  def is_big(<<c, _::binary>>) when ?A <= c and c <= ?Z, do: true
  def is_big(_), do: false
end
